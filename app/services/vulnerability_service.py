from typing import Any

from .dbs import get_collection


async def read_vulnerability_by_id(vulnerability_id: str) -> dict[str, Any]:
    vulnerabilities_collection = get_collection("vulnerabilities")
    pipeline = [
        { "$match": { "id": vulnerability_id } },
        {
            "$lookup": {
                "from": "exploits",
                "localField": "exploits",
                "foreignField": "id",
                "as": "exploits"
            }
        },
        {
            "$lookup": {
                "from": "cwes",
                "localField": "cwes",
                "foreignField": "@ID",
                "as": "cwes"
            }
        },
        {
            "$addFields": {
                "vuln_impact": {
                    "$ifNull": [
                        {
                            "$first": {
                                "$map": {
                                    "input": {
                                        "$filter": {
                                            "input": "$severity",
                                            "cond": { "$eq": ["$$this.type", "CVSS_V3"] }
                                        }
                                    },
                                    "as": "item",
                                    "in": "$$item.base_score"
                                }
                            }
                        },
                        0.0
                    ]
                },
                "attack_vector": {
                    "$ifNull": [
                        {
                            "$first": {
                                "$map": {
                                    "input": {
                                        "$filter": {
                                            "input": "$severity",
                                            "cond": { "$eq": ["$$this.type", "CVSS_V3"] }
                                        }
                                    },
                                    "as": "item",
                                    "in": "$$item.score"
                                }
                            }
                        },
                        ""
                    ]
                }
            }
        }
    ]
    cursor = vulnerabilities_collection.aggregate(pipeline)
    result = await cursor.to_list(length=1)
    return result[0] if result else {
        "vuln_impact": 0.0,
        "attack_vector": "",
    }
