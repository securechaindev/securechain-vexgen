from typing import Any

from app.database import DatabaseManager


class VulnerabilityService:
    def __init__(self, db: DatabaseManager):
        self._vulnerabilities_collection = db.get_vulnerabilities_collection()

    async def read_vulnerability_by_id(self, vulnerability_id: str) -> dict[str, Any]:
        pipeline = [
            { "$match": { "id": vulnerability_id } },
            {
                "$lookup": {
                    "from": "exploits",
                    "let": { "vulnExploits": "$exploits" },
                    "pipeline": [
                        {
                            "$match": {
                                "$expr": {
                                    "$and": [
                                        { "$in": ["$id", { "$ifNull": ["$$vulnExploits", []] }] }
                                    ]
                                }
                            }
                        }
                    ],
                    "as": "exploits"
                }
            },
            {
                "$lookup": {
                    "from": "cwes",
                    "let": { "vulnCwes": "$cwes" },
                    "pipeline": [
                        {
                            "$match": {
                                "$expr": {
                                    "$and": [
                                        { "$in": ["$@ID", { "$ifNull": ["$$vulnCwes", []] }] }
                                    ]
                                }
                            }
                        }
                    ],
                    "as": "cwes"
                }
            },
            {
                "$addFields": {
                    "vuln_impact": {
                        "$ifNull": [
                            {
                                "$first": {
                                    "$map": {
                                        "input": {
                                            "$filter": {
                                                "input": "$severity",
                                                "cond": { "$eq": ["$$this.type", "CVSS_V3"] }
                                            }
                                        },
                                        "as": "item",
                                        "in": "$$item.base_score"
                                    }
                                }
                            },
                            0.0
                        ]
                    },
                    "attack_vector": {
                        "$ifNull": [
                            {
                                "$first": {
                                    "$map": {
                                        "input": {
                                            "$filter": {
                                                "input": "$severity",
                                                "cond": { "$eq": ["$$this.type", "CVSS_V3"] }
                                            }
                                        },
                                        "as": "item",
                                        "in": "$$item.score"
                                    }
                                }
                            },
                            ""
                        ]
                    }
                }
            }
        ]
        cursor = self._vulnerabilities_collection.aggregate(pipeline)
        result = await cursor.to_list(length=1)
        return result[0] if result else {
            "vuln_impact": 0.0,
            "attack_vector": "",
        }
