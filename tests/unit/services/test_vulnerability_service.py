from unittest.mock import AsyncMock, Mock

import pytest

from app.database import DatabaseManager
from app.services.vulnerability_service import VulnerabilityService


@pytest.fixture
def mock_db():
    db = Mock(spec=DatabaseManager)
    mock_collection = Mock()
    db.get_vulnerabilities_collection.return_value = mock_collection
    return db, mock_collection


@pytest.fixture
def vulnerability_service(mock_db):
    db, _ = mock_db
    return VulnerabilityService(db)


@pytest.mark.asyncio
class TestVulnerabilityService:
    @pytest.mark.asyncio
    async def test_read_vulnerability_by_id_found(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-2024-1234",
            "description": "Test vulnerability",
            "vuln_impact": 7.5,
            "attack_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "exploits": [
                {"id": "EXPLOIT-123", "name": "Test Exploit"}
            ],
            "cwes": [
                {"@ID": "CWE-79", "name": "Cross-site Scripting"}
            ]
        }])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-2024-1234")

        assert result["id"] == "CVE-2024-1234"
        assert result["vuln_impact"] == 7.5
        assert "attack_vector" in result
        assert len(result["exploits"]) == 1
        assert len(result["cwes"]) == 1

    @pytest.mark.asyncio
    async def test_read_vulnerability_by_id_not_found(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-NONEXISTENT")

        assert result["vuln_impact"] == 0.0
        assert result["attack_vector"] == ""

    @pytest.mark.asyncio
    async def test_read_vulnerability_pipeline_structure(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-TEST",
            "vuln_impact": 5.0,
            "attack_vector": "test",
            "exploits": [],
            "cwes": []
        }])
        mock_collection.aggregate.return_value = mock_cursor

        await vulnerability_service.read_vulnerability_by_id("CVE-TEST")

        call_args = mock_collection.aggregate.call_args[0][0]

        assert len(call_args) == 4
        assert "$match" in call_args[0]
        assert call_args[0]["$match"]["id"] == "CVE-TEST"

        assert "$lookup" in call_args[1]
        assert call_args[1]["$lookup"]["from"] == "exploits"
        assert "$lookup" in call_args[2]
        assert call_args[2]["$lookup"]["from"] == "cwes"

        assert "$addFields" in call_args[3]
        assert "vuln_impact" in call_args[3]["$addFields"]
        assert "attack_vector" in call_args[3]["$addFields"]

    @pytest.mark.asyncio
    async def test_read_vulnerability_with_no_exploits(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-2024-5678",
            "vuln_impact": 9.8,
            "attack_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "exploits": [],
            "cwes": [{"@ID": "CWE-20", "name": "Improper Input Validation"}]
        }])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-2024-5678")

        assert result["id"] == "CVE-2024-5678"
        assert result["vuln_impact"] == 9.8
        assert len(result["exploits"]) == 0
        assert len(result["cwes"]) == 1

    @pytest.mark.asyncio
    async def test_read_vulnerability_with_no_cwes(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-2024-9999",
            "vuln_impact": 4.3,
            "attack_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "exploits": [{"id": "EXPLOIT-456", "name": "Another Exploit"}],
            "cwes": []
        }])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-2024-9999")

        assert result["id"] == "CVE-2024-9999"
        assert len(result["exploits"]) == 1
        assert len(result["cwes"]) == 0

    @pytest.mark.asyncio
    async def test_read_vulnerability_with_multiple_exploits_and_cwes(
        self, vulnerability_service, mock_db
    ):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-2024-0000",
            "vuln_impact": 6.5,
            "attack_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
            "exploits": [
                {"id": "EXPLOIT-1", "name": "Exploit 1"},
                {"id": "EXPLOIT-2", "name": "Exploit 2"},
                {"id": "EXPLOIT-3", "name": "Exploit 3"}
            ],
            "cwes": [
                {"@ID": "CWE-89", "name": "SQL Injection"},
                {"@ID": "CWE-79", "name": "XSS"}
            ]
        }])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-2024-0000")

        assert len(result["exploits"]) == 3
        assert len(result["cwes"]) == 2

    @pytest.mark.asyncio
    async def test_read_vulnerability_returns_dict(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()

        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-TEST",
            "vuln_impact": 5.0,
            "attack_vector": "test"
        }])
        mock_collection.aggregate.return_value = mock_cursor

        result = await vulnerability_service.read_vulnerability_by_id("CVE-TEST")
        assert isinstance(result, dict)

        mock_cursor.to_list = AsyncMock(return_value=[])
        result = await vulnerability_service.read_vulnerability_by_id("CVE-NONEXISTENT")
        assert isinstance(result, dict)
        assert "vuln_impact" in result
        assert "attack_vector" in result

    @pytest.mark.asyncio
    async def test_read_vulnerability_cursor_length_limit(self, vulnerability_service, mock_db):
        _, mock_collection = mock_db

        mock_cursor = Mock()
        mock_cursor.to_list = AsyncMock(return_value=[{
            "id": "CVE-TEST",
            "vuln_impact": 7.0,
            "attack_vector": "test"
        }])
        mock_collection.aggregate.return_value = mock_cursor

        await vulnerability_service.read_vulnerability_by_id("CVE-TEST")

        mock_cursor.to_list.assert_called_once_with(length=1)
